# Iterate through the row and see if there is a gene origin.
# If it does not have a gene origin, check if ID column has the gene name.
# If none of it works, pair the segment iterratively with all protein.
for index, mutation in mutated.iterrows():
    # Best case senario, we have gene name and brackets for precise finding
    if mutation["Gene origin"] != "No_data":
        if "[" in mutation["Neopeptide sequence"]:
            original = search_seq(mutation["Neopeptide sequence"])[0]
            modified = search_seq(mutation["Neopeptide sequence"])[1]
            # Locate the sequence with gene name, some don't have gene name matched
            try:
                seq_index = gene_list.index(mutation["Gene origin"])
                seq_string = protein_list[seq_index]
                # replace the original string with the modified string
                final_sequence = seq_string.replace(original, modified)
                name = split_list[seq_index].split("\n")[0]
                # Get the result in fasta format
                fasta_protein_write = (
                    (">" + name.split("|")[0] + "|PPP{}|" + name.split("|")[2] + "\n" + final_sequence)
                    .format(str(str(index).zfill(3)) + "_" + str(1)))
            except ValueError:
                n = 0
                for protein in protein_list:
                    if protein.find(original) != -1:
                        n += 1
                        final_sequence = protein.replace(original, modified)
                        name = split_list[protein_list.index(protein)].split("\n")[0]
                        fasta_protein_write = (
                            (">" + name.split("|")[0] + "|PPP{}|" + name.split("|")[2] + "\n" + final_sequence)
                            .format(str(str(index).zfill(3)) + "_" + str(n)))
        # The segment do not have the bracket, but have gene origin name
        else:
            # The sequence as key
            original = mutation["Neopeptide sequence"]
            aligner = Align.PairwiseAligner()
            aligner.mode = "local"
            try:
                alignments = aligner.align(protein_list[gene_list.index(mutation["Gene origin"])], original)
                print(index)
            except:
                pass